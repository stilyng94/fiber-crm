// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"stilyng94/fiber-crm/ent/lead"
	"stilyng94/fiber-crm/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LeadUpdate is the builder for updating Lead entities.
type LeadUpdate struct {
	config
	hooks    []Hook
	mutation *LeadMutation
}

// Where appends a list predicates to the LeadUpdate builder.
func (lu *LeadUpdate) Where(ps ...predicate.Lead) *LeadUpdate {
	lu.mutation.Where(ps...)
	return lu
}

// SetUpdateTime sets the "update_time" field.
func (lu *LeadUpdate) SetUpdateTime(t time.Time) *LeadUpdate {
	lu.mutation.SetUpdateTime(t)
	return lu
}

// SetName sets the "name" field.
func (lu *LeadUpdate) SetName(s string) *LeadUpdate {
	lu.mutation.SetName(s)
	return lu
}

// SetCompany sets the "company" field.
func (lu *LeadUpdate) SetCompany(s string) *LeadUpdate {
	lu.mutation.SetCompany(s)
	return lu
}

// SetEmail sets the "email" field.
func (lu *LeadUpdate) SetEmail(s string) *LeadUpdate {
	lu.mutation.SetEmail(s)
	return lu
}

// SetPhone sets the "phone" field.
func (lu *LeadUpdate) SetPhone(s string) *LeadUpdate {
	lu.mutation.SetPhone(s)
	return lu
}

// Mutation returns the LeadMutation object of the builder.
func (lu *LeadUpdate) Mutation() *LeadMutation {
	return lu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *LeadUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	lu.defaults()
	if len(lu.hooks) == 0 {
		if err = lu.check(); err != nil {
			return 0, err
		}
		affected, err = lu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LeadMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = lu.check(); err != nil {
				return 0, err
			}
			lu.mutation = mutation
			affected, err = lu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(lu.hooks) - 1; i >= 0; i-- {
			if lu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = lu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LeadUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LeadUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LeadUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lu *LeadUpdate) defaults() {
	if _, ok := lu.mutation.UpdateTime(); !ok {
		v := lead.UpdateDefaultUpdateTime()
		lu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lu *LeadUpdate) check() error {
	if v, ok := lu.mutation.Name(); ok {
		if err := lead.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Lead.name": %w`, err)}
		}
	}
	if v, ok := lu.mutation.Company(); ok {
		if err := lead.CompanyValidator(v); err != nil {
			return &ValidationError{Name: "company", err: fmt.Errorf(`ent: validator failed for field "Lead.company": %w`, err)}
		}
	}
	if v, ok := lu.mutation.Email(); ok {
		if err := lead.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Lead.email": %w`, err)}
		}
	}
	if v, ok := lu.mutation.Phone(); ok {
		if err := lead.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Lead.phone": %w`, err)}
		}
	}
	return nil
}

func (lu *LeadUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   lead.Table,
			Columns: lead.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: lead.FieldID,
			},
		},
	}
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: lead.FieldUpdateTime,
		})
	}
	if value, ok := lu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: lead.FieldName,
		})
	}
	if value, ok := lu.mutation.Company(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: lead.FieldCompany,
		})
	}
	if value, ok := lu.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: lead.FieldEmail,
		})
	}
	if value, ok := lu.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: lead.FieldPhone,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lead.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// LeadUpdateOne is the builder for updating a single Lead entity.
type LeadUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LeadMutation
}

// SetUpdateTime sets the "update_time" field.
func (luo *LeadUpdateOne) SetUpdateTime(t time.Time) *LeadUpdateOne {
	luo.mutation.SetUpdateTime(t)
	return luo
}

// SetName sets the "name" field.
func (luo *LeadUpdateOne) SetName(s string) *LeadUpdateOne {
	luo.mutation.SetName(s)
	return luo
}

// SetCompany sets the "company" field.
func (luo *LeadUpdateOne) SetCompany(s string) *LeadUpdateOne {
	luo.mutation.SetCompany(s)
	return luo
}

// SetEmail sets the "email" field.
func (luo *LeadUpdateOne) SetEmail(s string) *LeadUpdateOne {
	luo.mutation.SetEmail(s)
	return luo
}

// SetPhone sets the "phone" field.
func (luo *LeadUpdateOne) SetPhone(s string) *LeadUpdateOne {
	luo.mutation.SetPhone(s)
	return luo
}

// Mutation returns the LeadMutation object of the builder.
func (luo *LeadUpdateOne) Mutation() *LeadMutation {
	return luo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *LeadUpdateOne) Select(field string, fields ...string) *LeadUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated Lead entity.
func (luo *LeadUpdateOne) Save(ctx context.Context) (*Lead, error) {
	var (
		err  error
		node *Lead
	)
	luo.defaults()
	if len(luo.hooks) == 0 {
		if err = luo.check(); err != nil {
			return nil, err
		}
		node, err = luo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LeadMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = luo.check(); err != nil {
				return nil, err
			}
			luo.mutation = mutation
			node, err = luo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(luo.hooks) - 1; i >= 0; i-- {
			if luo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = luo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, luo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Lead)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from LeadMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LeadUpdateOne) SaveX(ctx context.Context) *Lead {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *LeadUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LeadUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (luo *LeadUpdateOne) defaults() {
	if _, ok := luo.mutation.UpdateTime(); !ok {
		v := lead.UpdateDefaultUpdateTime()
		luo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (luo *LeadUpdateOne) check() error {
	if v, ok := luo.mutation.Name(); ok {
		if err := lead.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Lead.name": %w`, err)}
		}
	}
	if v, ok := luo.mutation.Company(); ok {
		if err := lead.CompanyValidator(v); err != nil {
			return &ValidationError{Name: "company", err: fmt.Errorf(`ent: validator failed for field "Lead.company": %w`, err)}
		}
	}
	if v, ok := luo.mutation.Email(); ok {
		if err := lead.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Lead.email": %w`, err)}
		}
	}
	if v, ok := luo.mutation.Phone(); ok {
		if err := lead.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Lead.phone": %w`, err)}
		}
	}
	return nil
}

func (luo *LeadUpdateOne) sqlSave(ctx context.Context) (_node *Lead, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   lead.Table,
			Columns: lead.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: lead.FieldID,
			},
		},
	}
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Lead.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, lead.FieldID)
		for _, f := range fields {
			if !lead.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != lead.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: lead.FieldUpdateTime,
		})
	}
	if value, ok := luo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: lead.FieldName,
		})
	}
	if value, ok := luo.mutation.Company(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: lead.FieldCompany,
		})
	}
	if value, ok := luo.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: lead.FieldEmail,
		})
	}
	if value, ok := luo.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: lead.FieldPhone,
		})
	}
	_node = &Lead{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lead.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

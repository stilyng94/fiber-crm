// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"stilyng94/fiber-crm/ent/lead"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LeadCreate is the builder for creating a Lead entity.
type LeadCreate struct {
	config
	mutation *LeadMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (lc *LeadCreate) SetCreateTime(t time.Time) *LeadCreate {
	lc.mutation.SetCreateTime(t)
	return lc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (lc *LeadCreate) SetNillableCreateTime(t *time.Time) *LeadCreate {
	if t != nil {
		lc.SetCreateTime(*t)
	}
	return lc
}

// SetUpdateTime sets the "update_time" field.
func (lc *LeadCreate) SetUpdateTime(t time.Time) *LeadCreate {
	lc.mutation.SetUpdateTime(t)
	return lc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (lc *LeadCreate) SetNillableUpdateTime(t *time.Time) *LeadCreate {
	if t != nil {
		lc.SetUpdateTime(*t)
	}
	return lc
}

// SetName sets the "name" field.
func (lc *LeadCreate) SetName(s string) *LeadCreate {
	lc.mutation.SetName(s)
	return lc
}

// SetCompany sets the "company" field.
func (lc *LeadCreate) SetCompany(s string) *LeadCreate {
	lc.mutation.SetCompany(s)
	return lc
}

// SetEmail sets the "email" field.
func (lc *LeadCreate) SetEmail(s string) *LeadCreate {
	lc.mutation.SetEmail(s)
	return lc
}

// SetPhone sets the "phone" field.
func (lc *LeadCreate) SetPhone(s string) *LeadCreate {
	lc.mutation.SetPhone(s)
	return lc
}

// Mutation returns the LeadMutation object of the builder.
func (lc *LeadCreate) Mutation() *LeadMutation {
	return lc.mutation
}

// Save creates the Lead in the database.
func (lc *LeadCreate) Save(ctx context.Context) (*Lead, error) {
	var (
		err  error
		node *Lead
	)
	lc.defaults()
	if len(lc.hooks) == 0 {
		if err = lc.check(); err != nil {
			return nil, err
		}
		node, err = lc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LeadMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = lc.check(); err != nil {
				return nil, err
			}
			lc.mutation = mutation
			if node, err = lc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(lc.hooks) - 1; i >= 0; i-- {
			if lc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = lc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, lc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Lead)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from LeadMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (lc *LeadCreate) SaveX(ctx context.Context) *Lead {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lc *LeadCreate) Exec(ctx context.Context) error {
	_, err := lc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lc *LeadCreate) ExecX(ctx context.Context) {
	if err := lc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lc *LeadCreate) defaults() {
	if _, ok := lc.mutation.CreateTime(); !ok {
		v := lead.DefaultCreateTime()
		lc.mutation.SetCreateTime(v)
	}
	if _, ok := lc.mutation.UpdateTime(); !ok {
		v := lead.DefaultUpdateTime()
		lc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lc *LeadCreate) check() error {
	if _, ok := lc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Lead.create_time"`)}
	}
	if _, ok := lc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Lead.update_time"`)}
	}
	if _, ok := lc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Lead.name"`)}
	}
	if v, ok := lc.mutation.Name(); ok {
		if err := lead.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Lead.name": %w`, err)}
		}
	}
	if _, ok := lc.mutation.Company(); !ok {
		return &ValidationError{Name: "company", err: errors.New(`ent: missing required field "Lead.company"`)}
	}
	if v, ok := lc.mutation.Company(); ok {
		if err := lead.CompanyValidator(v); err != nil {
			return &ValidationError{Name: "company", err: fmt.Errorf(`ent: validator failed for field "Lead.company": %w`, err)}
		}
	}
	if _, ok := lc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "Lead.email"`)}
	}
	if v, ok := lc.mutation.Email(); ok {
		if err := lead.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Lead.email": %w`, err)}
		}
	}
	if _, ok := lc.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New(`ent: missing required field "Lead.phone"`)}
	}
	if v, ok := lc.mutation.Phone(); ok {
		if err := lead.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Lead.phone": %w`, err)}
		}
	}
	return nil
}

func (lc *LeadCreate) sqlSave(ctx context.Context) (*Lead, error) {
	_node, _spec := lc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (lc *LeadCreate) createSpec() (*Lead, *sqlgraph.CreateSpec) {
	var (
		_node = &Lead{config: lc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: lead.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: lead.FieldID,
			},
		}
	)
	if value, ok := lc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: lead.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := lc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: lead.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := lc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: lead.FieldName,
		})
		_node.Name = value
	}
	if value, ok := lc.mutation.Company(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: lead.FieldCompany,
		})
		_node.Company = value
	}
	if value, ok := lc.mutation.Email(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: lead.FieldEmail,
		})
		_node.Email = value
	}
	if value, ok := lc.mutation.Phone(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: lead.FieldPhone,
		})
		_node.Phone = value
	}
	return _node, _spec
}

// LeadCreateBulk is the builder for creating many Lead entities in bulk.
type LeadCreateBulk struct {
	config
	builders []*LeadCreate
}

// Save creates the Lead entities in the database.
func (lcb *LeadCreateBulk) Save(ctx context.Context) ([]*Lead, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lcb.builders))
	nodes := make([]*Lead, len(lcb.builders))
	mutators := make([]Mutator, len(lcb.builders))
	for i := range lcb.builders {
		func(i int, root context.Context) {
			builder := lcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LeadMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lcb *LeadCreateBulk) SaveX(ctx context.Context) []*Lead {
	v, err := lcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcb *LeadCreateBulk) Exec(ctx context.Context) error {
	_, err := lcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcb *LeadCreateBulk) ExecX(ctx context.Context) {
	if err := lcb.Exec(ctx); err != nil {
		panic(err)
	}
}

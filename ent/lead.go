// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"stilyng94/fiber-crm/ent/lead"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Lead is the model entity for the Lead schema.
type Lead struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Company holds the value of the "company" field.
	Company string `json:"company,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Lead) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case lead.FieldID:
			values[i] = new(sql.NullInt64)
		case lead.FieldName, lead.FieldCompany, lead.FieldEmail, lead.FieldPhone:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Lead", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Lead fields.
func (l *Lead) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case lead.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			l.ID = int(value.Int64)
		case lead.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				l.Name = value.String
			}
		case lead.FieldCompany:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field company", values[i])
			} else if value.Valid {
				l.Company = value.String
			}
		case lead.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				l.Email = value.String
			}
		case lead.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				l.Phone = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Lead.
// Note that you need to call Lead.Unwrap() before calling this method if this Lead
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Lead) Update() *LeadUpdateOne {
	return (&LeadClient{config: l.config}).UpdateOne(l)
}

// Unwrap unwraps the Lead entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *Lead) Unwrap() *Lead {
	_tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: Lead is not a transactional entity")
	}
	l.config.driver = _tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Lead) String() string {
	var builder strings.Builder
	builder.WriteString("Lead(")
	builder.WriteString(fmt.Sprintf("id=%v, ", l.ID))
	builder.WriteString("name=")
	builder.WriteString(l.Name)
	builder.WriteString(", ")
	builder.WriteString("company=")
	builder.WriteString(l.Company)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(l.Email)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(l.Phone)
	builder.WriteByte(')')
	return builder.String()
}

// Leads is a parsable slice of Lead.
type Leads []*Lead

func (l Leads) config(cfg config) {
	for _i := range l {
		l[_i].config = cfg
	}
}
